#!/bin/bash

## functions
get_cache_folder() {
  printf -- "%s/%s" "${CACHE_FOLDER}" "${user_project_ns}"
}
init_cache() {
  # shellcheck disable=SC2155
  rm -rf "${user_cache_folder}"
  git_clone "$(get_remote_url "${user_project_ns}")" "${user_cache_folder}"
}
sync_cache() {
  rsync -a --delete --exclude .git/ "${WORKING_DIR}/" "${user_cache_folder}" \
    || exception "Unable to rsync files"
  [[ "${UPDATE_LINKS}" == 'true' ]] \
    && update_links
}
update_cache() {
  [[ ! -d "${user_cache_folder}" ]] \
    && init_cache "${user_cache_folder}" \
    && return
  # verify local remote
  declare actual_remote_ns
  actual_remote_ns="$(get_remote_namespace "${user_cache_folder}")" \
    || exit 1
  [[ "${actual_remote_ns}" != "${user_project_ns}" ]] \
    && exception 'Invalid user project remote origin url'
  git_pull "${user_cache_folder}" 'origin' "${SOURCE_BRANCH}:${SOURCE_BRANCH}"
  git_pull "${user_cache_folder}" 'origin' "${user_default_branch}:${user_default_branch}"
}
update_links() {
  declare -r user_readme_path="${user_cache_folder}/${README_FILE}"
  sed -i "s~${PROJECT_LINK}~${user_project_ns}~g" "${user_readme_path}"
  sed -i "s~/${PROJECT_BRANCH}/\(pipeline\|raw\|file\)~/${user_default_branch}/\1~g" "${user_readme_path}"
  sed -i "s~ref=${PROJECT_BRANCH}~ref=${user_default_branch}~g" "${user_readme_path}"
}
init_user_repo() {
  declare user_id=''
  [[ "${ASSIGN}" == "${NEVER}" ]] \
    || user_id="$(get_user_id)" \
    || exit 1
  [[ "${ASSIGN}" == "${ALWAYS}" && -z "${user_id}" ]] \
    && exception "User ${user_name} does not exist"
  [[ -n "${GROUP_ID}" ]] \
    || GROUP_ID="$(get_group_id "${NAMESPACE}" 2>/dev/null)" \
    || GROUP_ID="$(create_ns "${NAMESPACE}")" \
    || exit 1
  project_id="$(create_user_project)" \
    || exit 1
  add_developer
  copy_issues
  init_cache
  git_commit "${user_cache_folder}" '--allow-empty' '-m "Initial commit"'
  git_push "${user_cache_folder}" '--all'
  declare user_default_branch
  user_default_branch="$(get_default_branch)" \
    || exit 1
  remove_protected_branch
  set_protected_branch "${user_default_branch}" "${DEV_ACCESS_LEVEL}"
  set_protected_branch "${SOURCE_BRANCH}" "${MAINTAINER_ACCESS_LEVEL}"
  sync_cache
  git_add_all "${user_cache_folder}"
  git_commit "${user_cache_folder}" '--allow-empty' '-m "Create assignment"'
  git_push "${user_cache_folder}" '--all'
  git_checkout "${user_cache_folder}" "-B${SOURCE_BRANCH}"
  git_push "${user_cache_folder}" '--all'
}
status_empty () {
  update_cache
  git_checkout "${user_cache_folder}" "${SOURCE_BRANCH}"
  sync_cache
  git_status_empty "${user_cache_folder}"
}
update_user_repo() {
  git_add_all "${user_cache_folder}"
  git_commit "${user_cache_folder}" '-m "Update assignment"'
  git_push "${user_cache_folder}" '--all'
  declare project_id
  project_id="$(get_project_id "${user_project_ns}")" \
    || exit 1
  request_exists \
    || create_request
}
read_issues() {
  ISSUES="$(gitlab_api "api/v4/projects/${PROJECT_ID}/issues?labels=${ISSUES_LABEL}")" \
    && ISSUES_COUNT="$(jq length <<< "${ISSUES}")" \
    || exit 1
}
copy_issues() {
  declare i issue
  for (( i=0; i < ISSUES_COUNT; i++ )); do
    issue="$(jq ".[${i}] | {title, description, due_date}" <<< "${ISSUES}")"
    [[ -n "${user_id}" ]] \
      && issue="$(jq --arg a "${user_id}" '. + {assignee_ids:[$a]}' <<< "${issue}")"
    gitlab_api "api/v4/projects/${project_id}/issues" "${issue}" >/dev/null
  done
}
read_project_info() {
  msg_start 'Getting project information'
  [[ -z "${ISSUES_LABEL}" && "${UPDATE_LINKS}" == 'false' && -n "${NAMESPACE}" ]] \
    && msg_end SKIPPED \
    && return
  [[ -d "${WORKING_DIR}/.git" ]] \
    || exception 'GitLab project not found in WORKING_DIR'
  PROJECT_LINK="$(get_remote_namespace "${WORKING_DIR}")" \
    && PROJECT_ID="$(get_project_id "${PROJECT_LINK}")" \
    && PROJECT_BRANCH="$(git_current_branch "${WORKING_DIR}")" \
    || exit 1
  [[ -z "${NAMESPACE}" ]] \
    && NAMESPACE="$(dirname "${PROJECT_LINK}")"
  read_issues
  msg_end
}
process_users() {
  declare user_name
  declare user_project_name
  declare user_project_ns
  declare user_cache_folder
  declare user_default_branch
  declare -i valid=0
  declare -i invalid=0
  # shellcheck disable=SC2013
  for user_name in $(cat <&3); do
    user_project_name="${PREFIX}${user_name}"
    user_project_ns="${NAMESPACE}/${user_project_name}"
    msg_start "${user_project_ns}"
    [[ ! "${user_name}" =~ ^[a-zA-Z0-9][a-z0-9_.-]*$ ]] \
      && msg_end INVALID \
      && invalid+=1 \
      && continue
    valid+=1
    [[ "${DRY_RUN}" == 'true' ]] \
      && msg_end SKIPPED \
      && continue
    user_cache_folder="$(get_cache_folder)"
    ! project_exists \
      && init_user_repo \
      && msg_end CREATED \
      && continue
    user_default_branch="$(get_default_branch)" \
      || exit 1
    status_empty \
      && msg_end PASSED \
      && continue
    update_user_repo \
      && msg_end UPDATED
  done
  (( valid != 0 || invalid != 0 )) \
    || exception 'Empty or invalid stdin' 2
  (( invalid == 0 )) \
    || exception "Invalid username occurred ${invalid} time(s)" 3
}
distribute() {
  # shellcheck disable=SC2155
  [[ ! -t 0 ]] \
    || exception 'Missing stdin' 2
  exec 3<&0
  check_command git jq
  acquire_token
  read_project_info
  # [[ -d "${WORKING_DIR}/.git" ]] \
  #   && ! git_status_empty "${WORKING_DIR}" \
  #   && exception 'Git status is not empty'
  process_users
}

# global constants
declare -r CACHE_FOLDER="${HOME}/.ams_distribute_cache"
declare -r README_FILE='README.md'
declare -r SOURCE_BRANCH='source'
declare -r ALWAYS='always'
declare -r NEVER='never'
declare -r AUTO='auto'
declare -ri DEV_ACCESS_LEVEL=30
declare -ri MAINTAINER_ACCESS_LEVEL=40

# default variables
declare DRY_RUN='false'
declare UPDATE_LINKS='false'
declare ASSIGN="${AUTO}"
declare ISSUES_LABEL=''
declare NAMESPACE=''
declare PREFIX=''
declare GROUP_ID=''
declare PROJECT_LINK=''
declare PROJECT_ID=''
declare PROJECT_BRANCH=''
declare ISSUES=''
declare -i ISSUES_COUNT=0
# shellcheck disable=SC2034
declare ACCESS_TOKEN

# get options
declare OPT
OPT="$(getopt --name "${0}" --options 'a:hi:lnp:s:' \
  --longoptions 'assign:,help,process-issues:,update-links,dry-run,prefix:,namespace:' \
  -- "$@")" \
  && eval set -- "${OPT}" \
  || exit 1

# process options
while (( $# > 0 )); do
  case "${1}" in
    -a|--assign)
      ASSIGN="${2}"
      [[ "${ASSIGN}" =~ ^(${ALWAYS}|${NEVER}|${AUTO})$ ]] \
        || exception 'Invalid option ASSIGN value'
      shift; shift ;;
    -h|--help) print_usage && exit 0 ;;
    -i|--process-issues)
      ISSUES_LABEL="$2"
      [[ "${ISSUES_LABEL}" =~ ^[a-z0-9][a-z0-9_-]+$ ]] \
        || exception 'Unsupported ISSUES_LABEL value' 2
      shift; shift ;;
    -l|--update-links)
      UPDATE_LINKS='true'
      [[ -f "${WORKING_DIR}/${README_FILE}" ]] \
        || exception 'Readme file not found in WORKING_DIR'
      shift ;;
    -n|--dry-run) DRY_RUN='true'; shift ;;
    -p|--prefix)
      PREFIX="${2}"
      [[ "${PREFIX}" =~ ^[a-z0-9][a-z0-9-]+$ ]] \
        || exception 'Unsupported PREFIX value' 2
      shift; shift ;;
    -s|--namespace)
      NAMESPACE="${2}"
      [[ "${NAMESPACE}" =~ ^[a-z0-9]{2,}(/[a-z0-9]{2,})*$ ]] \
        || exception 'Unsupported REMOTE_NAMESPACE dirname' 2
      shift; shift ;;
    --) shift; break ;;
     *) break ;;
  esac
done

# run main function
distribute
