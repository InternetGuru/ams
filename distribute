#!/usr/bin/env bash

set -x

## functions
get_cache_folder() {
  printf -- "%s/%s" "${CACHE_FOLDER}" "${user_project_ns}"
}
init_cache() {
  # shellcheck disable=SC2155
  rm -rf "${user_cache_folder}"
  git_clone "$(get_remote_url "${user_project_ns}")" "${user_cache_folder}"
}
sync_cache() {
  rsync -a --delete --exclude .git/ "${1:-${WORKING_DIR}}/" "${2:-${user_cache_folder}}" \
    || exception "Unable to rsync files"
  [[ "${UPDATE_LINKS}" == 'true' ]] \
    && update_links
}
get_cache() {
  [[ ! -d "${user_cache_folder}" ]] \
    && init_cache "${user_cache_folder}" \
    && return
  # verify local remote
  declare actual_remote_ns
  actual_remote_ns="$(get_remote_namespace "${user_cache_folder}")" \
    || exit 1
  [[ "${actual_remote_ns}" != "${user_project_ns}" ]] \
    && exception 'Invalid user project remote origin url'
  git_pull "${user_cache_folder}" 'origin' "${SOURCE_BRANCH}:${SOURCE_BRANCH}"
  git_pull "${user_cache_folder}" 'origin' "${SUBMIT_BRANCH}:${SUBMIT_BRANCH}"
  git_pull "${user_cache_folder}" 'origin' "${user_default_branch}:${user_default_branch}"
}
# TODO
update_links() {
  declare -r user_readme_path="${user_cache_folder}/${README_FILE}"
  sed -i "s~${PROJECT_LINK}~${user_project_ns}~g" "${user_readme_path}"
  sed -i "s~/${PROJECT_BRANCH}/\(pipeline\|raw\|file\)~/${user_default_branch}/\1~g" "${user_readme_path}"
  sed -i "s~/\(pipeline\|raw\|file\)/${PROJECT_BRANCH}~/\1/${user_default_branch}~g" "${user_readme_path}"
  sed -i "s~ref=${PROJECT_BRANCH}~ref=${user_default_branch}~g" "${user_readme_path}"
  sed -i "s~\(https://[^/]*\)/${PROJECT_LINK#*/}~\1/${user_project_ns#*/}~g" "${user_readme_path}"
}
init_user_repo() {
  declare user_id=''
  [[ "${ASSIGN}" == "${NEVER}" ]] \
    || user_id="$(get_user_id)" \
    || exit 1
  [[ "${ASSIGN}" == "${ALWAYS}" && -z "${user_id}" ]] \
    && exception "User ${user_name} does not exist"
  [[ -n "${GROUP_ID}" ]] \
    || GROUP_ID="$(get_group_id "${NAMESPACE}" 2>/dev/null)" \
    || GROUP_ID="$(create_ns "${NAMESPACE}")" \
    || exit 1
  project_id="$(create_user_project)" \
    || exit 1
  [[ $MEMBER_ROLE -gt 0 ]] \
    && add_member
  copy_issues
  init_cache
  git_commit "${user_cache_folder}" '--allow-empty' '-m "Initial commit"'
  git_push "${user_cache_folder}" '--all'
  declare user_default_branch
  user_default_branch="$(get_default_branch)" \
    || exit 1
  sync_cache
  git_add_all "${user_cache_folder}"
  git_commit "${user_cache_folder}" '--allow-empty' '-m "Create assignment"'
  git_push "${user_cache_folder}" '--all'
  git_checkout "${user_cache_folder}" "-B${SOURCE_BRANCH}"
  git_checkout "${user_cache_folder}" "-B${SUBMIT_BRANCH}"
  git_push "${user_cache_folder}" '--all'
  remove_protected_branch
  set_protected_branch "${user_default_branch}" "${DEV_ACCESS_LEVEL}"
  set_protected_branch "${SOURCE_BRANCH}" "${MAINTAINER_ACCESS_LEVEL}"
  set_protected_branch "${SUBMIT_BRANCH}" "${MAINTAINER_ACCESS_LEVEL}"
  set_public_pages "${project_id}" >/dev/null
  create_project_submit_token
}
status_empty () {
  get_cache
  validate \
    || return 1
  git_checkout "${user_cache_folder}" "${SOURCE_BRANCH}"
  sync_cache
  git_status_empty "${user_cache_folder}"
}
update_user_repo() {
  git_add_all "${user_cache_folder}"
  git_commit "${user_cache_folder}" '-m "Update assignment"'
  git_push "${user_cache_folder}" '--all'
  declare project_id
  project_id="$(get_project_id "${user_project_ns}")" \
    || exit 1
  request_exists \
    || create_request
  copy_issues
  set_public_pages "${project_id}" >/dev/null
}
read_issues() {
  local pid="${1:?project id missing}"
  local label="${2}"
  ISSUES="$(gitlab_api "api/v4/projects/${pid}/issues?labels=${label}")" \
    && ISSUES_COUNT="$(jq length <<< "${ISSUES}")" \
    || exit 1
}
copy_issues() {
  declare i issue_src issues_dst issues_count_dst
  declare -A description=()
  read_issues "${project_id}" \
    && issues_dst="${ISSUES}" issues_count_dst="${ISSUES_COUNT}"
  for (( i=0; i < issues_count_dst; i++ )); do
    description+=( ["$(jq -r ".[${i}].title" <<< "${issues_dst}")"]="$(jq -r ".[${i}].description" <<< "${issues_dst}")" )
  done
  for (( i=0; i < issues_count_src; i++ )); do
    issue_src="$(jq ".[${i}] | {title, description, due_date}" <<< "${issues_src}")"
    if [[ "${description["$(jq -r ".title" <<< "${issue_src}")"]}" == "$(jq -r ".description" <<< "${issue_src}")" ]]; then
      #printf -- "[issues] skipping '%s'\n" "$(jq -r ".title" <<< "${issue_src}")'" >&2
      continue
    fi
    # Update existing issue
    # ToDo
    # Add new issue
    #printf -- "[issues] adding '%s'\n" "${issue_src//$'\n'/|}" >&2
    [[ -n "${user_id}" ]] \
      && issue_src="$(jq --arg a "${user_id}" '. + {assignee_ids:[$a]}' <<< "${issue_src}")"
    gitlab_api "api/v4/projects/${project_id}/issues" "${issue_src}" >/dev/null
  done
}
read_project_info() {
  msg_start 'Getting project information'
  [[ -z "${ISSUES_LABEL}" && "${UPDATE_LINKS}" == 'false' && -n "${NAMESPACE}" ]] \
    && msg_end SKIPPED \
    && return
  [[ -d "${WORKING_DIR}/.git" ]] \
    || exception 'GitLab project not found in WORKING_DIR'
  PROJECT_LINK="$(get_remote_namespace "${WORKING_DIR}")" \
    && PROJECT_ID="$(get_project_id "${PROJECT_LINK}")" \
    && PROJECT_NAME="$(get_project_name "${PROJECT_LINK}")" \
    && PROJECT_BRANCH="$(git_current_branch "${WORKING_DIR}")" \
    || exit 1
  [[ -z "${NAMESPACE}" ]] \
    && NAMESPACE="$(dirname "${PROJECT_LINK}")"
  read_issues "${PROJECT_ID}" "${ISSUES_LABEL}" \
    && issues_src="${ISSUES}" issues_count_src="${ISSUES_COUNT}"
  msg_end
}
validate_ci() {
  local branch="${1}"
  cmp -s "${WORKING_DIR}/.gitlab-ci.yml" <(git_show "origin/${branch}:.gitlab-ci.yml" "${user_cache_folder}") \
    || echo "[WARNING] CI validation failed on ${branch}." >&2
}
validate() {
  # conform branches
  ! git_remote_branch_exists "${SOURCE_BRANCH}" "${user_cache_folder}" \
    && git_checkout "${user_cache_folder}" "-B${SOURCE_BRANCH}" \
    && git_push "${user_cache_folder}" origin "${SOURCE_BRANCH}"
  ! git_remote_branch_exists "${SUBMIT_BRANCH}" "${user_cache_folder}" \
    && git_checkout "${user_cache_folder}" "-B${SUBMIT_BRANCH}" \
    && git_push "${user_cache_folder}" origin "${SUBMIT_BRANCH}"
  # check ci hack
  # do not validate for DEFAULT_BRANCH_NAMESPACE
  [[ -n "${DEFAULT_BRANCH_NAMESPACE}" ]] \
    && return
  validate_ci "${user_default_branch}"
  validate_ci "${SOURCE_BRANCH}"
  validate_ci "${SUBMIT_BRANCH}"
}
update_default_branch() {
  [[ -z "${DEFAULT_BRANCH_NAMESPACE}" ]] \
    && return
  declare dest_default_branch
  declare dest_cache_folder
  declare user_cache_folder
  declare user_project_name
  declare user_project_ns
  declare user_default_branch
  declare PROJECT_LINK
  dest_default_branch="$(get_default_branch)"
  dest_cache_folder="${1}"
  user_project_name="${PREFIX}${user_name}"
  user_project_ns="${DEFAULT_BRANCH_NAMESPACE}/${user_project_name}"
  user_cache_folder="$(get_cache_folder)"
  user_default_branch="$(get_default_branch)"
  get_cache
  validate
  git_checkout "${user_cache_folder}" "-B${user_default_branch}"
  git_checkout "${dest_cache_folder}" "-B${dest_default_branch}"
  sync_cache "${user_cache_folder}" "${dest_cache_folder}"
  git_add_all "${dest_cache_folder}"
  git_commit "${dest_cache_folder}" '--allow-empty' '-m "Update from user repo"'
  git_push "${dest_cache_folder}" '--all'
}
process_users() {
  declare user_name
  declare user_project_name
  declare user_project_ns
  declare user_cache_folder
  declare user_default_branch
  declare -i valid=0
  declare -i invalid=0
  declare status_empty_code
  [[ -z "${CACHE_FOLDER}" ]] \
    && CACHE_FOLDER="$(mktemp -d)"
  # shellcheck disable=SC2013
  for user_name in $(cat <&3); do
    user_project_name="${PREFIX}${user_name}"
    user_project_ns="${NAMESPACE}/${user_project_name}"
    msg_start "${user_project_ns}"
    [[ ! "${user_name}" =~ ^[a-zA-Z0-9][a-z0-9_.-]*$ ]] \
      && msg_end INVALID \
      && invalid+=1 \
      && continue
    valid+=1
    [[ "${DRY_RUN}" == 'true' ]] \
      && msg_end SKIPPED \
      && continue
    user_cache_folder="$(get_cache_folder)"
    ! project_exists \
      && init_user_repo \
      && update_default_branch "${user_cache_folder}" \
      && msg_end CREATED \
      && continue
    user_default_branch="$(get_default_branch)" \
      || exit 1
    status_empty
    status_empty_code=$?
    update_default_branch "${user_cache_folder}" \
      || exit 1
    [[ "$status_empty_code" == 0 ]] \
      && msg_end PASSED \
      && continue
    update_user_repo \
      && msg_end UPDATED
  done
  (( valid != 0 || invalid != 0 )) \
    || exception 'Empty or invalid stdin' 2
  (( invalid == 0 )) \
    || exception "Invalid username occurred ${invalid} time(s)" 3
}
distribute() {
  # shellcheck disable=SC2155
  [[ ! -t 0 ]] \
    || exception 'Missing stdin' 2
  exec 3<&0
  acquire_token
  read_project_info
  [[ -d "${WORKING_DIR}/.git" ]] \
    && ! git_status_empty "${WORKING_DIR}" \
    && exception 'Git status is not empty'
  process_users
}

# global constants
declare -r README_FILE='README.md'
declare -r SOURCE_BRANCH='source'
declare -r SUBMIT_BRANCH='submit'
declare -r ALWAYS='always'
declare -r NEVER='never'
declare -r AUTO='auto'
declare -ri DEV_ACCESS_LEVEL=30
declare -ri MAINTAINER_ACCESS_LEVEL=40

# default variables
declare CACHE_FOLDER=''
declare DRY_RUN='false'
declare UPDATE_LINKS='false'
declare ASSIGN="${AUTO}"
declare ISSUES_LABEL=''
declare NAMESPACE=''
declare PREFIX=''
declare GROUP_ID=''
declare PROJECT_LINK=''
declare PROJECT_ID=''
declare -i MEMBER_ROLE=$DEV_ACCESS_LEVEL
declare DEFAULT_BRANCH_NAMESPACE=''
# shellcheck disable=SC2034
declare PROJECT_NAME=''
declare PROJECT_BRANCH=''
declare ISSUES=''
declare issues_src="$ISSUES"
declare -i ISSUES_COUNT=0
declare -i issues_count_src="${ISSUES_COUNT}"
# shellcheck disable=SC2034
declare ACADEMY_GITLAB_ACCESS_TOKEN

# get options
declare OPT
OPT="$(getopt --name "${0}" --options 'a:d:hi:lno:p:s:r:' \
  --longoptions 'assign:,help,process-issues:,update-links,default-branch-namespace:,dry-run,output-dir:,prefix:,member-role:,namespace:' \
  -- "$@")" \
  && eval set -- "${OPT}" \
  || exit 1

# process options
while (( $# > 0 )); do
  case "${1}" in
    -a|--assign)
      ASSIGN="${2}"
      [[ "${ASSIGN}" =~ ^(${ALWAYS}|${NEVER}|${AUTO})$ ]] \
        || exception 'Invalid option ASSIGN value'
      shift 2
      ;;
    -d|--default-branch-namespace)
      DEFAULT_BRANCH_NAMESPACE="${2}"
      shift 2
      ;;
    -h|--help)
      print_usage \
        && exit 0
      ;;
    -i|--process-issues)
      ISSUES_LABEL="$2"
      [[ "${ISSUES_LABEL}" =~ ^[a-z0-9][a-z0-9_-]+$ ]] \
        || exception 'Unsupported ISSUES_LABEL value' 2
      shift 2
      ;;
    -l|--update-links)
      UPDATE_LINKS='true'
      [[ -f "${WORKING_DIR}/${README_FILE}" ]] \
        || exception 'Readme file not found in WORKING_DIR'
      shift
      ;;
    -n|--dry-run)
      DRY_RUN='true'
      shift
      ;;
    -p|--prefix)
      PREFIX="${2}"
      [[ "${PREFIX}" =~ ^[a-z0-9]+([a-z0-9._-]+)*$ ]] \
        || exception 'Unsupported PREFIX value' 2
      shift 2
      ;;
    -r|--member-role)
      MEMBER_ROLE="${2}"
      shift 2
      ;;
    -s|--namespace)
      NAMESPACE="${2}"
      [[ "${NAMESPACE}" =~ ^[a-z0-9-]{2,}(/[a-z0-9-]{2,})*$ ]] \
        || exception "Unsupported REMOTE_NAMESPACE '$NAMESPACE' dirname" 2
      shift 2
      ;;
    -o|--output-dir)
      CACHE_FOLDER="${2}";
      [[ -d "${CACHE_FOLDER}" ]] \
        || mkdir -p "${CACHE_FOLDER}" \
        || exception "Unable to create '${CACHE_FOLDER}' directory"
      shift 2
      ;;
    --) shift; break ;;
     *) break ;;
  esac
done

# run main function
distribute
