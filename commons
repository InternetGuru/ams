#!/bin/bash

declare MSG_OPENED='false'

clear_stdin() {
  while read -r -t 0; do read -r; done
}
msg_start() {
  [[ "${MSG_OPENED}" == 'true' ]] \
    && exception 'Message already started'
  MSG_OPENED='true'
  printf -- '%s ... ' "$@" >&2
}
msg_end() {
  declare -r close_message=${1:-DONE}
  [[ "${MSG_OPENED}" = 'false' ]] \
    && exception 'Message not started'
  MSG_OPENED='false'
  printf -- '[ %s ]\n' "${close_message}" >&2
}
confirm() {
  printf -- '%s [YES/No] ' "${1:-'Are you sure?'}" >&2
  clear_stdin
  read -r
  [[ "${REPLY}" =~ ^[Yy]([Ee][Ss])?$ || -z "${REPLY}" ]] \
    && return 0
  [[ "${REPLY}" =~ ^[Nn][Oo]?$ ]] \
    && return 1
  confirm 'Type'
}
prompt() {
  declare -r message="${1:-Enter value}"
  declare -r silent="${2}"
  printf -- '%s: ' "${message}" >&2
  clear_stdin
  # silent user input (e.g. for password)
  if [[ "${silent}" == 'silent' ]]; then
    read -rs
  else
    read -r
  fi
  [[ -n "${REPLY}" ]] \
    && return 0
  prompt "${message}"
}
exception() {
  declare -r message="${1:-${SCRIPT_NAME} unknown exception}"
  declare -ri code=${2:-1}
  printf -- '%s in %s() [ #%d ]\n' "${message}" "${FUNCNAME[1]}" "${code}" >&2
  exit "${code}"
}
print_usage() {
  declare -r usage="${1}"
  fmt -w "$(tput cols)" <<< "${usage}"
}
check_command() {
  for cmd in "${@}"; do
    command -v "${cmd}" >/dev/null 2>&1 \
      || exception "Command ${cmd} not found"
  done
}
