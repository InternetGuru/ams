#!/bin/bash

get_last_commit() {
  [[ -z "${DEADLINE}" ]] \
    && git_last_commit "${user_projects_folder}/${user_project_ns}" \
    && return
  get_last_push
}
sync_files() {
  git_checkout "${user_projects_folder}/${user_project_ns}" "${last_commit}"
  # shellcheck disable=SC2086
  rsync -a --relative --delete \
    "${user_projects_folder}/${user_project_ns}/./"${EDITABLE} "${WORKING_DIR}" \
    || exception 'Unable to rsync files'
}
create_results() {
  "${DIR}/${SCRIPT}" -w "${WORKING_DIR}" evaluate
  mv "${WORKING_DIR}/.results" "${user_projects_folder}/${user_project_ns}"
  compile_txt="${user_projects_folder}/${user_project_ns}/.results/compile.txt"
  checkstyle_txt="${user_projects_folder}/${user_project_ns}/.results/checkstyle.txt"
  test_txt="${user_projects_folder}/${user_project_ns}/.results/test.txt"
  results=("${compile_txt}" "${checkstyle_txt}" "${test_txt}")
  declare result_name
  for result in "${results[@]}"; do
    result_name="${result##*/}"
    printf -- '%s %s\n' "${result_name%.txt}" "$(< "${result}")"
  done
  echo
  git_reset_hard "${user_projects_folder}/${user_project_ns}"
}
collect() {
  acquire_token
  [[ -z "${OUTPUT_DIR}" ]] \
    && OUTPUT_DIR="$(mktemp -d)"
  # shellcheck disable=SC2155
  declare -r user_projects_folder="${OUTPUT_DIR}"
  declare user_projects
  declare group_id
  declare user_project_ns
  declare user_project_id
  declare last_commit
  declare compile_txt
  declare checkstyle_txt
  declare test_txt
  declare results
  # shellcheck disable=SC2034
  group_id="$(get_group_id "${NAMESPACE}" 2>/dev/null)"
  [[ -z "${group_id}" ]] \
    && exception "Namespace '${NAMESPACE}' not found" 3
  user_projects="$(get_group_projects)" \
    || exit 1
  # clone all user_projects from ns
  for user_project in ${user_projects}; do
    user_project_ns="$(jq -r '.name_with_namespace' <<< "${user_project}")"
    # shellcheck disable=SC2034
    user_project_id="$(jq -r '.id' <<< "${user_project}")"
    [[ "$(basename "${user_project_ns}")" != "${PREFIX}"* ]] \
      && continue
    echo "$user_project_ns"
    [[ "${DRY_RUN}" == 'true' ]] \
      && continue
    mkdir -p "${user_projects_folder}/${user_project_ns}"
    git_clone "$(get_remote_url "${user_project_ns}")" "${user_projects_folder}/${user_project_ns}"
    last_commit="$(get_last_commit)" \
      || exception "Unable to get last commit"
    [[ "${last_commit}" == 'null' ]] \
      && echo "No commit found" \
      && continue
    sync_files
    create_results
  done
}

declare DRY_RUN='false'
declare PREFIX=''
declare NAMESPACE=''
declare EDITABLE='src/main/*.java'
declare DEADLINE=''
declare OUTPUT_DIR=''

# get options
declare OPT
OPT="$(getopt --name "${0}" --options 'hd:e:no:p:s:' \
  --longoptions 'help,deadline:,editable:,dry-run,output-dir:,prefix:,namespace:' \
  -- "$@")" \
  && eval set -- "${OPT}" \
  || exit 1

# process options
while (( $# > 0 )); do
  # shellcheck disable=SC2034
  case "${1}" in
    -h|--help) print_usage && exit 0 ;;
    -d|--deadline)
      DEADLINE="${2}";
      [[ "${DEADLINE}" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}(T[0-9]{2}:[0-9]{2}(:[0-9]{2}(Z|[+âˆ’][0-9]{2}:[0-9]{2})?)?)?$ ]] \
        || exception "Invalid deadline option"
      shift; shift ;;
    -e|--editable)
      EDITABLE="${2}";
      [[ "${EDITABLE}" == *".."* ]] \
        && exception "Invalid editable option, contains '..'"
      shift; shift ;;
    -n|--dry-run) DRY_RUN='true'; shift ;;
    -o|--output-dir)
      OUTPUT_DIR="${2}";
      [[ -d "${OUTPUT_DIR}" ]] \
        || mkdir -p "${OUTPUT_DIR}" \
        || exception "Unable to create '${OUTPUT_DIR}' directory"
      [[ -z "$(ls "${OUTPUT_DIR}/")" ]] \
        || exception "Output directory 'ls' is not empty"
      shift; shift ;;
    -p|--prefix) PREFIX="${2}"; shift; shift ;;
    -s|--namespace)
      NAMESPACE="${2}";
      [[ "${NAMESPACE}" =~ ^[a-z0-9]{2,}(/[a-z0-9]{2,})*$ ]] \
        || exception "Unsupported NAMESPACE '${NAMESPACE}'" 2
      shift; shift ;;
    --) shift; break ;;
     *) break ;;
  esac
done

collect
