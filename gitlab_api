#!/usr/bin/env bash

# shellcheck disable=SC2034
[[ -z "${GITLAB_URL}" ]] \
  && declare -r GITLAB_URL="${CI_SERVER_HOST:-gitlab.com}"
[[ -z "${TOKEN_FILE}" ]] \
  && declare -r TOKEN_FILE="${HOME}/.ACADEMY_GITLAB_ACCESS_TOKEN"

gitlab_api() {
  declare -r url="${1}"
  declare data="${2}"
  declare method
  declare req
  declare form=""
  declare content_type="application/json"
  case "${data}" in
    '-')
      method='DELETE'
      ;;
    'PUT:'*)
      method='PUT'
      data="{${data#PUT:}}"
      ;;
    'PUT-FILE:'*)
      method='PUT'
      form="${data#PUT-FILE:}"
      ;;
    'POST-FORM:'*)
      method='POST'
      content_type="application/x-www-form-urlencoded"
      data="${data#POST-FORM:}"
      ;;
    '')
      method='GET'
      ;;
    *)
      method='POST'
  esac
  # shellcheck disable=SC2155
  case "${method}" in
    'GET'|'DELETE')
      declare response="$(curl --silent --write-out '\n%{http_code}\n' \
        --header "Authorization: Bearer ${ACADEMY_GITLAB_ACCESS_TOKEN}" \
        --request "${method}" \
        "https://${GITLAB_URL}/${url}"
      )"
      ;;
    'PUT'|'POST')
      if [[ -z "${form}" ]]; then
        declare response="$(curl --silent --write-out '\n%{http_code}\n' \
          --header "Authorization: Bearer ${ACADEMY_GITLAB_ACCESS_TOKEN}" \
          --header "Content-Type: $content_type" \
          --request "${method}" \
          --data "${data:-{\}}" \
          "https://${GITLAB_URL}/${url}"
        )"
      else
        declare response="$(curl --silent --write-out '\n%{http_code}\n' \
          --header "Authorization: Bearer ${ACADEMY_GITLAB_ACCESS_TOKEN}" \
          --form "${form}" \
          --request "${method}" \
          "https://${GITLAB_URL}/${url}"
        )"
      fi
      ;;
    *)
      exception "Unknown HTTP method '${method}'" 1
  esac
  # shellcheck disable=SC2155
  declare status="$(sed -n '$p' <<< "${response}")"
  # shellcheck disable=SC2155
  declare output="$(sed '$d' <<< "${response}")"
  [[ "${status}" != 2?? ]] \
    && printf -- '%s\n' "${output}" >&2 \
    && warning "Request status ${status}: ${url}" 0 \
    && return 1
  printf -- '%s\n' "${output}"
}
get_token() {
  [[ "$(tty)" =~ "not a tty" ]] \
    && exception "Unable to authorize without TOKEN_FILE"
  exec 0</dev/tty
  prompt 'GitLab personal access token'
  echo "${REPLY}" > "${TOKEN_FILE}"
}
get_project_id() {
  declare -r ns="${1}"
  declare project_id
  # shellcheck disable=SC2154
  project_id=$( gitlab_api "api/v4/projects/${ns//\//%2F}" | jq -r '.id' )
  [[ -n "${project_id}" ]] \
  || warning "Project '${ns}' does not exist" 1 \
  || return 1
  printf -- '%s\n' "${project_id}"
}
get_project_name() {
  declare -r ns="${1}"
  # shellcheck disable=SC2154
  gitlab_api "api/v4/projects/${ns//\//%2F}" | jq -r '.name'
}
get_default_branch() {
  # shellcheck disable=SC2154
  gitlab_api "api/v4/projects/${user_project_ns//\//%2F}" | jq -r '.default_branch'
}
project_exists() {
  # Should get $1 instead of $user_project_ns
  [[ -n "$1" ]] && local user_project_ns="${1}"
  get_project_id "${user_project_ns}" >/dev/null 2>&1
}
group_exists() {
  get_group_id "${1}" >/dev/null 2>&1
}
get_group_id() {
  local group_id
  declare -r group_name="${1//\//%2F}"
  group_id="$( gitlab_api "api/v4/groups/${group_name}" | jq -r '.id' )"
  [[ -n "${group_id}" ]] \
  || warning "Group '${1}' does not exist" 1 \
  || return 1
  printf -- '%s\n' "${group_id}"
}
get_source_merge() {
  local project_id="${1}"
  gitlab_api "api/v4/projects/${project_id}/merge_requests?state=opened&source_branch=${SOURCE_BRANCH}"
}
request_exists() {
  # shellcheck disable=SC2154
  get_source_merge "${project_id}" \
    | grep -qv "^\[\]$"
}
create_request() {
  # shellcheck disable=SC2154
  gitlab_api "api/v4/projects/${project_id}/merge_requests" \
    "{\"id\":\"${project_id}\", \"source_branch\":\"${SOURCE_BRANCH}\", \"target_branch\":\"${user_default_branch}\", \
    \"remove_source_branch\":\"false\", \"title\":\"Update from ${SOURCE_BRANCH} branch\"}" >/dev/null
}
create_user_project() {
  declare visibility='private'
  # shellcheck disable=SC2154
  [[ -z "${user_id}" && ${MEMBER_ROLE} > 0 ]] \
    && visibility='public'
  # shellcheck disable=SC2154
  # shellcheck disable=SC2153
  gitlab_api 'api/v4/projects' \
    "{\"namespace_id\":\"${GROUP_ID}\", \"name\":\"${user_name}\", \"path\":\"${user_project_name}\", \"visibility\":\"${visibility}\"}" \
    | jq -r '.id'
}
get_role() {
  gitlab_api "api/v4/projects/${project_id}/members/all/${user_id}" | jq -r '.access_level'
}
is_member() {
  gitlab_api "api/v4/projects/${project_id}/members/${user_id}" 2>/dev/null >/dev/null
}
add_member() {
  [[ -z "${user_id}" ]] \
    && return
  (( MEMBER_ROLE == 0 )) \
    && return
  # shellcheck disable=SC2155
  declare -ir role="$(get_role 2>/dev/null)"
  (( role >= MEMBER_ROLE )) \
    && return
  is_member \
    && return
  gitlab_api "api/v4/projects/${project_id}/members" \
    "{\"access_level\":\"${MEMBER_ROLE}\", \"user_id\":\"${user_id}\"}" >/dev/null
}
remove_protected_branch() {
  gitlab_api "api/v4/projects/${project_id}/protected_branches/${user_default_branch}" '-' >/dev/null
}
set_protected_branch() {
  declare -r branch="${1}"
  declare -r access_level="${2}"
  gitlab_api "api/v4/projects/${project_id}/protected_branches?name=${branch}&push_access_level=${access_level}&merge_access_level=${access_level}" '{}' >/dev/null
}
create_group() {
  declare -r group_name="${1}"
  declare -r parent_id="${2}"
  gitlab_api 'api/v4/groups' \
    "{\"name\":\"${group_name}\", \"path\":\"${group_name}\", \"parent_id\":\"${parent_id}\", \"visibility\":\"public\"}" \
    | jq -r '.id'
}
get_user_id() {
  # shellcheck disable=SC2154
  gitlab_api "api/v4/users?username=${user_name}" \
    | jq -r '.[] | .id' | sed 's/null//'
}
get_user_name() {
  # shellcheck disable=SC2154
  gitlab_api "api/v4/users?username=${user_name}" \
    | jq -r '.[] | .name' | sed 's/null//'
}
create_ns() {
  declare -r ns="${1}"
  # shellcheck disable=SC2155
  declare -r parent_ns="$(dirname "${1}")"
  [[ "${parent_ns}" == '.' ]] \
    && exception "Root group ${ns} does not exist"
  declare parent_id
  parent_id="$(get_group_id "${parent_ns}" 2>/dev/null)" \
    || parent_id="$(create_ns "${parent_ns}")" \
    || exit 1
  create_group "$(basename "${ns}")" "${parent_id}"
}
get_remote_namespace() {
  declare -r folder="${1}"
  git -C "${folder}" remote get-url --push origin | sed "s/^.*${GITLAB_URL}[:/]//;s/.git$//"
}
get_remote_url() {
  declare -r project="${1}"
  printf -- "https://oauth2:%s@%s/%s.git" "${ACADEMY_GITLAB_ACCESS_TOKEN}" "${GITLAB_URL}" "${project}"
}
get_group_projects() {
  # shellcheck disable=SC2154
  gitlab_api "api/v4/groups/${group_id}/projects" \
    | jq -cr '.[] | { name_with_namespace, id }' | tr -d " "
}
get_last_push() {
  # shellcheck disable=SC2154
  gitlab_api "api/v4/projects/${user_project_id}/events?action=pushed" \
    | jq -r "[.[] | select(.created_at < \"${DEADLINE}\")][0] | .push_data .commit_to"
}
acquire_token() {
  [[ -s "${TOKEN_FILE}" ]] \
    || get_token
  # shellcheck disable=SC2034
  ACADEMY_GITLAB_ACCESS_TOKEN="$(cat "${TOKEN_FILE}")" \
    || exit 1
  # test ACADEMY_GITLAB_ACCESS_TOKEN
  gitlab_api "api/v4/projects" >/dev/null
}
remove_project() {
  declare -r project="${1}"
  declare project_id
  project_id="$( get_project_id "${project}" )" \
  || exception "Project '${project}' does not exist" 1
  gitlab_api "api/v4/projects/${project_id}" -
}
get_project_avatar() {
  local project_id
  local output_file
  local avatar_url
  declare -r ns="${1}"
  project_id=$( get_project_id "$ns" ) \
  || warning "Source project '${ns}' does not exist" 1 \
  || return 1
  output_file=$( mktemp )
  avatar_url="$( gitlab_api "api/v4/projects/${project_id}" | jq -r .avatar_url )"
  curl "${avatar_url}" > "${output_file}.${avatar_url##*.}"
  printf '%s\n' "${output_file}.${avatar_url##*.}"
}
set_project_avatar() {
  local project_id
  declare -r ns="${1}"
  local input_file="${2}"
  project_id=$( get_project_id "${ns}" ) \
  || warning "Destination project '${ns}' does not exist" 1 \
  || return 1
  gitlab_api "api/v4/projects/${project_id}" "PUT-FILE:avatar=@${input_file}"
}
set_group_avatar() {
  local group_id
  declare -r ns="${1}"
  local input_file="${2}"
  group_id=$( get_group_id "${ns}" ) \
  || warning "Destination group '${ns}' does not exist" 1 \
  || return 1
  gitlab_api "api/v4/groups/${group_id}" "PUT-FILE:avatar=@${input_file}"
}
set_public_pages() {
  local project_id="${1}"
  gitlab_api "api/v4/projects/${project_id}" 'PUT:"pages_access_level":"public"'
}
copy_avatar() {
  local type
  case "${1}" in
    # group avatar
    '-g')
      type='group'
      shift
      ;;
    # project avatar (default)
    *)
      type='project'
  esac
  local avatar_file
  local src="${1}"
  local dst="${2}"
  avatar_file="$( get_project_avatar "${src}" )" \
  || warning "Could not get source project '${src}' avatar" 1 \
  || return 1
  "set_${type}_avatar" "${dst}" "${avatar_file}" \
  || warning "Could not set target ${type} '${dst}' avatar" 1 \
  || return 1
  rm "${avatar_file}"
}
fork_project() {
  local src_id
  local data
  local -A attr=( [visibility]="public" )
  local output
  while (( $# > 0 )); do
    case "${1}" in
      -d)
        attr[description]="${2}"
        shift 2
        ;;
      -n)
        attr[name]="${2}"
        if [[ -z "${attr[path]}" ]]; then
          attr[path]="${attr[name],,}"
          attr[path]="${attr[path]// /-}"
        fi
        shift 2
        ;;
      -N)
        attr[path]="${2}"
        shift 2
        ;;
      -p)
        attr[namespace_path]="${2}"
        shift 2
        ;;
      -v)
        attr[visibility]="${2}"
        shift 2
        ;;
      --)
        shift
        break
        ;;
      -*)
        warninig "Unknown parameter '${1}'"
        return 2
        ;;
      *)
        break
    esac
  done
  [[ -n "${attr[name]}" ]] \
  || warning "Missing essential parameter 'name' (opt. -n)" 1 \
  || return 1
  [[ -n "${attr[namespace_path]}" ]] \
  || warning "Missing essential parameter 'namespace_path' (opt. -p)" 1 \
  || return 1
  group_exists "${attr[namespace_path]}" \
  || warning "Target group '${attr[namespace_path]}' does not exist" 1 \
  || return 1
  ! project_exists "${attr[namespace_path]}/${attr[path]}" \
  || warning "Project '${attr[namespace_path]}/${attr[path]}' already exists" 1 \
  || return 1
  [[ -n "${1}" ]] \
  || warning "Missing source repository to fork from" 1 \
  || return 1
  local src="${1}"
  src_id="$( get_project_id "${src}" )" \
  || warning "Source repository '${src}' does not exist" \
  || return 1
  for key in "${!attr[@]}"; do
    printf -v data -- '%s,"%s":"%s"' "$data" "${key}" "${attr[$key]}"
  done
  output=$( gitlab_api "api/v4/projects/${src_id}/fork" "{${data#,}}" ) \
  || return 1
  jq . <<< "${output}"
}
create_project_submit_token() {
  local token
  local output
  # remove current access token and variable regardless of existence
  gitlab_api "api/v4/projects/${project_id}/access_tokens/ACADEMY_SUBMIT_TOKEN" '-' > /dev/null 2>&1
  gitlab_api "api/v4/projects/${project_id}/variables/ACADEMY_SUBMIT_TOKEN" '-' > /dev/null 2>&1
  # create new access token and variable
  output="$(gitlab_api "api/v4/projects/${project_id}/access_tokens" "{ \"name\":\"ACADEMY_SUBMIT_TOKEN\", \"scopes\":[\"write_repository\"], \"access_level\": 40, \"expires_at\": \"$(date +%Y-%m-%d -d "+ 356 day")\" }")" \
    || return 1
  token="$(jq -r .token <<< "${output}")"
  gitlab_api "api/v4/projects/${project_id}/variables" "POST-FORM:key=ACADEMY_SUBMIT_TOKEN&value=${token}&protected=true&masked=true" > /dev/null
}
