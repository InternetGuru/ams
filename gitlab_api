#!/bin/bash

gitlab_api() {
  declare -r url="${1}"
  declare data="${2}"
  declare req='GET'
  [[ -n "${data}" ]] \
    && req='POST'
  [[ "${data}" == '-' ]] \
    && req='DELETE' \
    && data="{}"
  # shellcheck disable=SC2155
  declare response="$(curl --silent --write-out '\n%{http_code}\n' \
    --header "Authorization: Bearer ${TOKEN}" \
    --header 'Content-Type: application/json' \
    --request ${req} --data "${data:-{\}}" "https://${GITLAB_URL}/${url}")"
  # shellcheck disable=SC2155
  declare status="$(sed -n '$p' <<< "${response}")"
  # shellcheck disable=SC2155
  declare output="$(sed '$d' <<< "${response}")"
  [[ "${status}" != 20* ]] \
    && printf -- '%s\n' "${output}" >&2 \
    && exception "Request status ${status}: ${url}"
  printf -- '%s\n' "${output}"
}
authorize() {
  [[ "$(tty)" =~ "not a tty" ]] \
    && exception "Unable to authorize without TOKEN_FILE"
  exec 0</dev/tty
  prompt 'Username'
  declare username="${REPLY}"
  prompt 'Password' silent
  declare password="${REPLY}"
  echo
  gitlab_api 'oauth/token' \
    "{\"grant_type\":\"password\", \"username\":\"${username}\", \"password\":\"${password}\"}" \
    | jq -r '.access_token' > "${TOKEN_FILE}"
}
get_project_id() {
  declare -r ns="${1}"
  # shellcheck disable=SC2154
  gitlab_api "api/v4/projects/${ns//\//%2F}" | jq -r '.id'
}
get_default_branch() {
  # shellcheck disable=SC2154
  gitlab_api "api/v4/projects/${user_project_ns//\//%2F}" | jq -r '.default_branch'
}
project_exists() {
  get_project_id "${user_project_ns}" >/dev/null 2>&1
}
get_group_id() {
  declare -r group_name="${1//\//%2F}"
  gitlab_api "api/v4/groups/${group_name}" | jq -r '.id'
}
request_exists() {
  # shellcheck disable=SC2154
  gitlab_api "api/v4/projects/${project_id}/merge_requests?state=opened&source_branch=${SOURCE_BRANCH}" \
    | grep -qv "^\[\]$"
}
create_request() {
  # shellcheck disable=SC2154
  gitlab_api "api/v4/projects/${project_id}/merge_requests" \
    "{\"id\":\"${project_id}\", \"source_branch\":\"${SOURCE_BRANCH}\", \"target_branch\":\"${user_branch}\", \
    \"remove_source_branch\":\"false\", \"title\":\"Update from ${SOURCE_BRANCH} branch\"}" >/dev/null
}
create_user_project() {
  declare visibility='public'
  # shellcheck disable=SC2154
  [[ -n "${user_id}" ]] \
    && visibility='private'
  # shellcheck disable=SC2154
  gitlab_api 'api/v4/projects' \
    "{\"namespace_id\":\"${GROUP_ID}\", \"name\":\"${user_project_name}\", \"visibility\":\"${visibility}\"}" \
    | jq -r '.id'
}
get_role() {
  gitlab_api "api/v4/projects/${project_id}/members/all/${user_id}" | jq -r '.access_level'
}
add_developer() {
  [[ -z "${user_id}" ]] \
    && return
  # shellcheck disable=SC2155
  declare -ir role="$(get_role 2>/dev/null)"
  (( role >= DEV_ACCESS_LEVEL )) \
    && return
  gitlab_api "api/v4/projects/${project_id}/members" \
    "{\"access_level\":\"${DEV_ACCESS_LEVEL}\", \"user_id\":\"${user_id}\"}" >/dev/null
}
remove_protected_branch() {
  gitlab_api "api/v4/projects/${project_id}/protected_branches/${user_branch}" '-' >/dev/null
}
set_protected_branch() {
  declare -r branch="${2}"
  declare -r access_level="${3}"
  gitlab_api "api/v4/projects/${project_id}/protected_branches?name=${branch}&push_access_level=${access_level}&merge_access_level=${access_level}" '{}' >/dev/null
}
create_group() {
  declare -r group_name="${1}"
  declare -r parent_id="${2}"
  gitlab_api 'api/v4/groups' \
    "{\"name\":\"${group_name}\", \"path\":\"${group_name}\", \"parent_id\":\"${parent_id}\", \"visibility\":\"public\"}" \
    | jq -r '.id'
}
get_user_id() {
  # shellcheck disable=SC2154
  gitlab_api "api/v4/users?username=${user_name}" \
    | jq -r '.[] | .id' | sed 's/null//'
}
create_ns() {
  declare -r ns="${1}"
  # shellcheck disable=SC2155
  declare -r parent_ns="$(dirname "${1}")"
  [[ "${parent_ns}" == '.' ]] \
    && exception "Root group ${ns} does not exist"
  declare parent_id
  parent_id="$(get_group_id "${parent_ns}" 2>/dev/null)" \
    || parent_id="$(create_ns "${parent_ns}")" \
    || exit 1
  create_group "$(basename "${ns}")" "${parent_id}"
}
get_remote_namespace() {
  declare -r folder="${1}"
  git -C "${folder}" config --get remote.origin.url | sed "s/^.*${GITLAB_URL}[:/]//;s/.git$//"
}
get_remote_url() {
  printf -- "https://oauth2:%s@%s/%s.git" "${TOKEN}" "${GITLAB_URL}" "${user_project_ns}"
}
get_group_projects() {
  # shellcheck disable=SC2154
  gitlab_api "api/v4/groups/${group_id}/projects" \
    | jq -r '.[] | .name_with_namespace' | tr -d " "
}
