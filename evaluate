#!/bin/bash

get_test_color() {
  declare color='brightgreen'
  declare perc="${1}"
  (( perc < 85 )) \
    && color='green'
  (( perc < 70 )) \
    && color='yellow'
  (( perc < 55 )) \
    && color='orange'
  (( perc < 45 )) \
    && color='red'
  echo "${color}"
}
run_io_tests() {
  "${DIR}/iotest" "${IOTEST_FOLDER}" "${1}" > ${IOTEST_LOG}
  declare summary passed count
  summary="$(grep 'Summary:' < "${IOTEST_LOG}" | cut -d ' ' -f2-)"
  count="$(cut -d',' -f1 <<< "${summary}" | cut -d' ' -f2)"
  passed="$(cut -d',' -f3 <<< "${summary}" | cut -d' ' -f3)"
  declare test_color='success'
  [[ ${passed} -lt ${count} ]] \
    && test_color='critical'
  printf -- '%s/%s' "${passed:-0}" "${count:-0}" > "${IOTEST_TXT}"
  curl -so "${IOTEST_SVG}" "https://img.shields.io/badge/IO%20Tests-${passed}/${count}-${test_color}"
}
main() {
  declare -r IOTEST_FOLDER="${WORKING_DIR}/iotest"
  declare -r RESULTS="${WORKING_DIR}/.results"
  declare -r IOTEST_LOG="${RESULTS}/iotest.log"
  declare -r IOTEST_TXT="${RESULTS}/iotest.txt"
  declare -r IOTEST_SVG="${RESULTS}/iotest.svg"
  declare -r GENERATED_TXT="${RESULTS}/generated.txt"
  declare -r BADGES_TXT="${RESULTS}/badges.txt"

  mkdir -p "${RESULTS}"
  printf -- '' > "${BADGES_TXT}"
  # deafults for iotests
  curl -so "${IOTEST_SVG}" 'https://img.shields.io/badge/IO%20Tests-0/0-gray'
  printf -- 'n/a' > "${IOTEST_TXT}"
  printf -- '' > "${IOTEST_LOG}"
  case ${ACADEMY_LANG} in
    java)
      declare -r COMPILE_TXT="${RESULTS}/compile.txt"
      declare -r CHECKSTYLE_TXT="${RESULTS}/checkstyle.txt"
      declare -r TEST_TXT="${RESULTS}/test.txt"
      # shellcheck disable=SC1090
      # shellcheck disable=SC1091
      . "${DIR}/evaluate_java"
      printf -- 'compile: %s\n' "$(<"${COMPILE_TXT}")" >> "${BADGES_TXT}"
      printf -- 'checkstyle: %s\n' "$(<"${CHECKSTYLE_TXT}")" >> "${BADGES_TXT}"
      printf -- 'test: %s\n' "$(<"${TEST_TXT}")" >> "${BADGES_TXT}"
    ;;
    oracle)
      # shellcheck disable=SC1090
      # shellcheck disable=SC1091
      . "${DIR}/evaluate_oracle"
    ;;
    *)
    exception "Unexpected exception: academy lang should be checked before"
  esac
  printf -- 'iotest: %s\n' "$(<"${IOTEST_TXT}")" >> "${BADGES_TXT}"
  date +%s > "${GENERATED_TXT}"
  printf -- 'age: %s\n' "$(<"${GENERATED_TXT}")" >> "${BADGES_TXT}"
}

main "$@"
