#!/bin/bash

get_test_color() {
  declare color='brightgreen'
  declare perc="${1}"
  (( perc < 85 )) \
    && color='green'
  (( perc < 70 )) \
    && color='yellow'
  (( perc < 55 )) \
    && color='orange'
  (( perc < 45 )) \
    && color='red'
  echo "${color}"
}
pretty_diff() {
  diff --old-line-format=$'- %l\n' --new-line-format=$'+ %l\n' --unchanged-line-format='' "$@"
}
io_test() {
  declare -r test_folder="${1}"
  # shellcheck disable=SC2155
  declare -r test_folder_name="$(basename "${test_folder}")"
  declare -r test_name="${2}"
  declare -r test_path="${test_folder}/${test_name}"
  declare cmd="${3}"
  # explicit declare test extension variables to disable shellcheck SC2154
  declare stdin='' stdout='' stderr='' sc='' optarg=''
  # dynamically declare test extension variables
  for ext in "${IOTEST_EXTENSTIONS[@]}"; do
    [[ -f "${test_path}.${ext}" ]] \
      && declare "${ext}"="$(<"${test_path}.${ext}")"
  done
  # TODO check unsupported test extensions (how?)
  echo -e "\nTest ${test_folder_name}/${test_name}"
  # create cmd from template
  # TODO how about full path (e.g. running shell script)?
  # ^ maybe run every script in its folder?
  # shellcheck disable=SC2059
  [[ ${use_fullpath} == 0 ]] \
    && cmd="$(printf -- "${cmd}" "${test_folder_name%.*}") ${optarg}" \
    || cmd="$(printf -- "${cmd}" "${test_folder#"${IOTEST_FOLDER}/"}") ${optarg}"
  declare out_file err_file status_code
  out_file="$(mktemp)"
  err_file="$(mktemp)"
  # run cmd once
  eval "echo '${stdin}' | ${cmd} >'${out_file}' 2>'${err_file}'"
  status_code=$?
  declare retrun_code=0
  # test status code
  if [[ -n "${sc}" ]]; then
    echo 'Status code diff'
    pretty_diff <(echo "${status_code}") <(echo "${sc}") \
      || retrun_code=1
  fi
  # test stdout
  if [[ -n "${stdout}" ]]; then
    echo "Stdout diff"
    pretty_diff "${out_file}" <(echo "${stdout}") \
      || retrun_code=1
  fi
  # test stderr
  if [[ -n "${stderr}" ]]; then
    echo "Stderr diff"
    pretty_diff "${err_file}" <(echo "${stderr}") \
      || retrun_code=1
  fi
  rm "${out_file}"
  rm "${err_file}"
  return ${retrun_code}
}
run_io_tests() {
  [[ ! -d "${IOTEST_FOLDER}" ]] \
    && return
  # defaults
  curl -so "${IOTEST_SVG}" 'https://img.shields.io/badge/IO%20Tests-0/0-gray'
  printf -- 'n/a' > "${IOTEST_TXT}"
  printf -- '' > "${IOTEST_LOG}"
  # run iotests
  declare -r cmd="${1}"
  declare -r use_fullpath=${2:-0}
  declare -i passed=0 count=0
  # search deepest folders only by -links 2 (folder with 2 hardlinks)
  while read -r -d '' folder; do
    # shellcheck disable=SC2012
    for name in $(ls "${folder}/" | rev | cut -d. -f2- | rev | sort -u); do
      count+=1
      io_test "${folder}" "${name}" "${cmd}" >> "${IOTEST_LOG}" \
        && passed+=1
    done
  done < <(find "${IOTEST_FOLDER}" -type d -links 2 -print0)
  # generate summary and badge
  printf -- "Summary: %s/%s\n" "${passed}" "${count}" >> "${IOTEST_LOG}"
  declare test_color='success'
  [[ ${passed} < ${count} ]] \
    && test_color='critical'
  printf -- '%s/%s' "${passed}" "${count}" > "${IOTEST_TXT}"
  curl -so "${IOTEST_SVG}" "https://img.shields.io/badge/IO%20Tests-${passed}/${count}-${test_color}"
}
main() {
  declare -ra IOTEST_EXTENSTIONS=( stdin stdout stderr sc optarg )
  declare -r IOTEST_FOLDER="${WORKING_DIR}/iotest"
  declare -r RESULTS="${WORKING_DIR}/.results"
  declare -r IOTEST_LOG="${RESULTS}/iotest.log"
  declare -r IOTEST_TXT="${RESULTS}/iotest.txt"
  declare -r IOTEST_SVG="${RESULTS}/iotest.svg"

  mkdir -p "${RESULTS}"
  case ${ACADEMY_LANG} in
    java)
      # shellcheck disable=SC1090
      . "${DIR}/evaluate_java"
    ;;
    oracle)
      # shellcheck disable=SC1090
      . "${DIR}/evaluate_oracle"
    ;;
    *)
    exception "Unexpected exception: academy lang should be checked before"
  esac
  # run lang specific evaulate
  evaluate
}

main "$@"
