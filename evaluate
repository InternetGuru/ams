#!/bin/bash

get_test_color() {
  declare color='brightgreen'
  (( perc < 85 )) \
    && color='green'
  (( perc < 70 )) \
    && color='yellow'
  (( perc < 55 )) \
    && color='orange'
  (( perc < 45 )) \
    && color='red'
  echo "${color}"
}
pretty_diff() {
  diff --old-line-format=$'- %l\n' --new-line-format=$'+ %l\n' --unchanged-line-format='' "$@"
}
io_test() {
  declare -r test_folder="${1}"
  # shellcheck disable=SC2155
  declare -r test_folder_name="$(basename "${test_folder}")"
  declare -r test_name="${2}"
  declare -r test_path="${test_folder}/${test_name}"
  declare cmd="${3}"
  # explicit declare test extension variables to disable shellcheck SC2154
  declare stdin='' stdout='' stderr='' sc='' optarg=''
  # dynamically declare test extension variables
  for ext in "${IOTEST_EXTENSTIONS[@]}"; do
    [[ -f "${test_path}.${ext}" ]] \
      && declare "${ext}"="$(<"${test_path}.${ext}")"
  done
  # TODO check unsupported test extensions (how?)
  echo -e "\nTest ${test_folder_name}/${test_name}"
  # create cmd from template
  # TODO how about full path (e.g. running shell script)?
  # ^ maybe run every script in its folder?
  # shellcheck disable=SC2059
  cmd="$(printf -- "${cmd}" "${test_folder_name%.*}") ${optarg}"
  declare out_file err_file status_code
  out_file="$(mktemp)"
  err_file="$(mktemp)"
  # run cmd once
  echo "${stdin}" | ${cmd} >"${out_file}" 2>"${err_file}"
  status_code=$?
  declare retrun_code=0
  # test status code
  if [[ -n "${sc}" ]]; then
    echo 'Status code diff'
    pretty_diff <(echo "${status_code}") <(echo "${sc}") \
      || retrun_code=1
  fi
  # test stdout
  if [[ -n "${stdout}" ]]; then
    echo "Stdout diff"
    pretty_diff "${out_file}" <(echo "${stdout}") \
      || retrun_code=1
  fi
  # test stderr
  if [[ -n "${stderr}" ]]; then
    echo "Stderr diff"
    pretty_diff "${err_file}" <(echo "${stderr}") \
      || retrun_code=1
  fi
  rm "${out_file}"
  rm "${err_file}"
  return ${retrun_code}
}
run_io_tests() {
  # defaults
  curl -so "${IOTEST_SVG}" 'https://img.shields.io/badge/IO%20Tests-0/0-gray'
  printf -- 'n/a' > "${IOTEST_TXT}"
  printf -- '' > "${IOTEST_LOG}"
  # run iotests
  declare -r cmd="${1}"
  declare -i passed=0 count=0
  # search deepest folders only by -links 2 (folder with 2 hardlinks)
  while read -r -d '' folder; do
    # shellcheck disable=SC2012
    for name in $(ls "${folder}/" | rev | cut -d. -f2- | rev | sort -u); do
      count+=1
      io_test "${folder}" "${name}" "${cmd}" >> "${IOTEST_LOG}" \
        && passed+=1
    done
  done < <(find "${IOTEST_FOLDER}" -type d -links 2 -print0)
  # generate summary and badge
  printf -- "Summary: %s/%s\n" "${passed}" "${count}" >> "${IOTEST_LOG}"
  declare test_color='success'
  [[ ${passed} < ${count} ]] \
    && test_color='critical'
  printf -- '%s/%s' "${passed}" "${count}" > "${IOTEST_TXT}"
  curl -so "${IOTEST_SVG}" "https://img.shields.io/badge/IO%20Tests-${passed}/${count}-${test_color}"
}
evaluate_java() {

  curl -so "${COMPILE_SVG}" 'https://img.shields.io/badge/Compile-failed-critical'
  curl -so "${CHECKSTYLE_SVG}" 'https://img.shields.io/badge/Code%20Style-n/a-gray'
  curl -so "${TEST_SVG}" 'https://img.shields.io/badge/CI%20Tests-0/0-gray'

  printf -- 'failed' > "${COMPILE_TXT}"
  printf -- 'n/a' > "${CHECKSTYLE_TXT}"
  printf -- 'n/a' > "${TEST_TXT}"

  mvn -f "${POM}" compile > "${COMPILE_LOG}" 2>&1 \
    || exit 0
  curl -so "${COMPILE_SVG}" 'https://img.shields.io/badge/Compile-passed-success'
  printf -- 'passed' > "${COMPILE_TXT}"

  # shellcheck disable=SC2155
  declare -r tmppom="$(mktemp -d)/checkstyle-pom.xml"
  declare -r src='src/main'

  cat << EOD > "${tmppom}"
  <project>
    <modelVersion>4.0.0</modelVersion>
    <groupId>InternetGuru</groupId>
    <artifactId>java-checkstyle</artifactId>
    <version>1</version>
    <properties>
      <maven.compiler.source>1.8</maven.compiler.source>
      <maven.compiler.target>1.8</maven.compiler.target>
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <build>
      <sourceDirectory>${WORKING_DIR}/${src}</sourceDirectory>
      <testSourceDirectory>${WORKING_DIR}/src/test</testSourceDirectory>
      <pluginManagement>
        <plugins>
           <plugin>
             <groupId>org.apache.maven.plugins</groupId>
             <artifactId>maven-checkstyle-plugin</artifactId>
             <version>3.1.1</version>
             <configuration>
               <configLocation>google_checks.xml</configLocation>
               <encoding>UTF-8</encoding>
               <consoleOutput>true</consoleOutput>
               <failsOnError>true</failsOnError>
               <linkXRef>false</linkXRef>
             </configuration>
             <executions>
               <execution>
                 <id>validate</id>
                 <phase>validate</phase>
                 <goals>
                   <goal>check</goal>
                 </goals>
               </execution>
             </executions>
           </plugin>
        </plugins>
      </pluginManagement>
    </build>
  </project>
EOD

  # run checkstyle and save warnings and errors into log
  mvn -f "${tmppom}" -T 1C clean install -Dmaven.test.skip -DskipTests
  mvn -f "${tmppom}" checkstyle:check | grep '^\[\(WARN\|ERROR\)' > "${CHECKSTYLE_LOG}" 2>&1
  [[ ${PIPESTATUS[0]} != 0 ]] \
    && exit 1

  # shellcheck disable=SC2155
  declare -ri errs=$(cut -d" " -f2 < "${CHECKSTYLE_LOG}" | sort -ut: -k1,2 | wc -l)
  # shellcheck disable=SC2155
  declare -ri lines=$(find ${src} -name '*.java' -exec cat {} + | wc -l)
  declare -i perc=100
  (( errs > 0 )) \
    && (( perc = 99 - errs * 100 / lines ))

  color="$(get_test_color "${perc}")"

  curl -so "${CHECKSTYLE_SVG}" "https://img.shields.io/badge/Code%20Style-${perc}%20%25-${color}"
  printf -- "%d%%" "${perc}" > "${CHECKSTYLE_TXT}"

  declare test_color='success'
  mvn -Dstyle.color=never -f "${POM}" test > "${TEST_LOG}" 2>&1 \
    || test_color='critical'
  # shellcheck disable=SC2155
  declare -r summary=$(grep 'Tests run:' "${TEST_LOG}" | head -n1)
  # shellcheck disable=SC2155
  declare -ri runs=$(tr -d ',' <<< "${summary}" | cut -d' ' -f4)
  # shellcheck disable=SC2155
  declare -ri failures=$(tr -d ',' <<< "${summary}" | cut -d' ' -f6)
  # shellcheck disable=SC2155
  declare -ri skipped=$(tr -d ',' <<< "${summary}" | cut -d' ' -f10)
  declare -ri total=$((runs - skipped))
  declare -ri passed=$((total - failures))
  curl -so "${TEST_SVG}" "https://img.shields.io/badge/CI%20Tests-${passed}/${total}-${test_color}"
  printf -- "%s" "${summary}" > "${TEST_TXT}"

  run_io_tests "mvn -q -f ${POM} exec:java@%s"
}
evaluate_oracle() {
  :
}
evaluate() {
  mkdir -p "${RESULTS}"
  case ${ACADEMY_LANG} in
    java)
      evaluate_java
    ;;
    oracle)
      evaluate_oracle
    ;;
    *)
    exception "Unexpected exception: academy lang should be checked before"
  esac
}

declare -ra IOTEST_EXTENSTIONS=( stdin stdout stderr sc optarg )
declare -r IOTEST_FOLDER="${WORKING_DIR}/iotest"
declare -r POM="${WORKING_DIR}/pom.xml"
declare -r RESULTS="${WORKING_DIR}/.results"
declare -r COMPILE_LOG="${RESULTS}/compile.log"
declare -r CHECKSTYLE_LOG="${RESULTS}/checkstyle.log"
declare -r TEST_LOG="${RESULTS}/test.log"
declare -r IOTEST_LOG="${RESULTS}/iotest.log"
declare -r COMPILE_TXT="${RESULTS}/compile.txt"
declare -r CHECKSTYLE_TXT="${RESULTS}/checkstyle.txt"
declare -r TEST_TXT="${RESULTS}/test.txt"
declare -r IOTEST_TXT="${RESULTS}/iotest.txt"
declare -r COMPILE_SVG="${RESULTS}/compile.svg"
declare -r CHECKSTYLE_SVG="${RESULTS}/checkstyle.svg"
declare -r TEST_SVG="${RESULTS}/test.svg"
declare -r IOTEST_SVG="${RESULTS}/iotest.svg"

evaluate "$@"
